// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: midtrans.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MidtransService_CreateTransaction_FullMethodName = "/pb.MidtransService/CreateTransaction"
)

// MidtransServiceClient is the client API for MidtransService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MidtransServiceClient interface {
	CreateTransaction(ctx context.Context, in *CreateMidtransRequest, opts ...grpc.CallOption) (*SnapResponse, error)
}

type midtransServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMidtransServiceClient(cc grpc.ClientConnInterface) MidtransServiceClient {
	return &midtransServiceClient{cc}
}

func (c *midtransServiceClient) CreateTransaction(ctx context.Context, in *CreateMidtransRequest, opts ...grpc.CallOption) (*SnapResponse, error) {
	out := new(SnapResponse)
	err := c.cc.Invoke(ctx, MidtransService_CreateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MidtransServiceServer is the server API for MidtransService service.
// All implementations must embed UnimplementedMidtransServiceServer
// for forward compatibility
type MidtransServiceServer interface {
	CreateTransaction(context.Context, *CreateMidtransRequest) (*SnapResponse, error)
	mustEmbedUnimplementedMidtransServiceServer()
}

// UnimplementedMidtransServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMidtransServiceServer struct {
}

func (UnimplementedMidtransServiceServer) CreateTransaction(context.Context, *CreateMidtransRequest) (*SnapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedMidtransServiceServer) mustEmbedUnimplementedMidtransServiceServer() {}

// UnsafeMidtransServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MidtransServiceServer will
// result in compilation errors.
type UnsafeMidtransServiceServer interface {
	mustEmbedUnimplementedMidtransServiceServer()
}

func RegisterMidtransServiceServer(s grpc.ServiceRegistrar, srv MidtransServiceServer) {
	s.RegisterService(&MidtransService_ServiceDesc, srv)
}

func _MidtransService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMidtransRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MidtransServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MidtransService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MidtransServiceServer).CreateTransaction(ctx, req.(*CreateMidtransRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MidtransService_ServiceDesc is the grpc.ServiceDesc for MidtransService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MidtransService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MidtransService",
	HandlerType: (*MidtransServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _MidtransService_CreateTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "midtrans.proto",
}
